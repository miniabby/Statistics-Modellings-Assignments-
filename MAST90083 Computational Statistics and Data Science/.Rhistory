MSE.ARIMA.with.Seasonality.corr.12 #best
MSE.ARIMA.without.Seasonality.corr.12
MSE.GLM.corr.12
# Features used based on correlation with market share
RMSE.ARIMA.with.Seasonality.corr.12 #best
RMSE.ARIMA.without.Seasonality.corr.12
RMSE.GLM.corr.12
# Features used based on correlation with market share
MAE.ARIMA.with.Seasonality.corr.12 #best
MAE.ARIMA.without.Seasonality.corr.12
MAE.GLM.corr.12
library(patchwork)
ARIMA.with.Seasonality.plot.12 +
ARIMA.without.Seasonality.plot.12 +
GLM.plot.12 +
GLM.step.plot.12
library(patchwork)
ARIMA.with.Seasonality.plot.12 +
ARIMA.without.Seasonality.plot.12 +
GLM.plot.12 +
GLM.step.plot.12
ARIMA.Corr.with.Seasonality.plot.12 + ARIMA.Corr.without.Seasonality.plot.12 + ARIMA.Corr.with.Seasonality.forecast.12 + ARIMA.Corr.without.Seasonality.forecast.12
ARIMA.Corr.with.Seasonality.plot.12  + ARIMA.Corr.with.Seasonality.forecast.12
ARIMA.Corr.without.Seasonality.plot.12 + ARIMA.Corr.without.Seasonality.forecast.12
rownames(corr)[1:index]
training.x <- x[1:138,]
training.y <- y[1:138,]
share.train <- ts(training.y, start=c(2008.1),frequency=12)
test.x <- x[139:144,]
test.y <- y[139:144,]
share.test <- ts(test.y, start=c(2019.6),frequency=12)
sig.x.train <- cbind(training.x$us_total.red.meat, training.x$us_production_commercial_beef, training.x$aus_avg_rainfall, training.x$us_production_fedral_inspected_total.poultry,  training.x$us_production_fedral_inspected_total.red.meat, training.x$aus_population_estimated.resident.population, training.x$us_fed_avg_dressed_heifers, training.x$aus_beef.veal_slaughterings, training.x$us_livestock_commercial_bulls.and.stags, training.x$us_cold_storage_veal, training.x$us_livestock_commercial_lambs.and.yearlings, training.x$aus_population_overseas_arrivals, training.x$us_fed_avg_live_calves, training.x$us_cold_storage_beef, training.x$us_commercial_avg_live_calves, training.x$aus_Meat.Produced....CATTLE..excl..calves.....Total..State..Original..tonnes., training.x$aus_exports.of.beef..veal.and.live.cattle.to.US, training.x$us_fed_avg_dressed_steers, training.x$aus_population_net.overseas.migration, training.x$us_production_fedral_inspected_total.red.meat.and.poultry)
colnames(sig.x.train) <- c('us_total.red.meat', 'us_production_commercial_beef', 'aus_avg_rainfall', 'us_production_fedral_inspected_total.poultry',  'us_production_fedral_inspected_total.red.meat', 'aus_population_estimated.resident.population', 'us_fed_avg_dressed_heifers', 'aus_beef.veal_slaughterings', 'us_livestock_commercial_bulls.and.stags', 'us_cold_storage_veal', 'us_livestock_commercial_lambs.and.yearlings', 'aus_population_overseas_arrivals', 'us_fed_avg_live_calves', 'us_cold_storage_beef', 'us_commercial_avg_live_calves', 'aus_Meat.Produced....CATTLE..excl..calves.....Total..State..Original..tonnes.', 'aus_exports.of.beef..veal.and.live.cattle.to.US', 'us_fed_avg_dressed_steers', 'aus_population_net.overseas.migration', 'us_production_fedral_inspected_total.red.meat.and.poultry')
training.x <- x[1:138,]
training.y <- y[1:138,]
share.train <- ts(training.y, start=c(2008.1),frequency=12)
test.x <- x[139:144,]
test.y <- y[139:144,]
share.test <- ts(test.y, start=c(2019.6),frequency=12)
sig.x.train <- cbind(training.x$us_total.red.meat, training.x$us_production_commercial_beef, training.x$aus_avg_rainfall, training.x$us_production_fedral_inspected_total.poultry,  training.x$us_production_fedral_inspected_total.red.meat, training.x$aus_population_estimated.resident.population, training.x$us_fed_avg_dressed_heifers, training.x$aus_beef.veal_slaughterings, training.x$us_livestock_commercial_bulls.and.stags, training.x$us_cold_storage_veal, training.x$us_livestock_commercial_lambs.and.yearlings, training.x$aus_population_overseas_arrivals, training.x$us_fed_avg_live_calves, training.x$us_cold_storage_beef, training.x$us_commercial_avg_live_calves, training.x$aus_Meat.Produced....CATTLE..excl..calves.....Total..State..Original..tonnes., training.x$aus_exports.of.beef..veal.and.live.cattle.to.US, training.x$us_fed_avg_dressed_steers, training.x$aus_population_net.overseas.migration, training.x$us_production_fedral_inspected_total.red.meat.and.poultry)
colnames(sig.x.train) <- c('us_total.red.meat', 'us_production_commercial_beef', 'aus_avg_rainfall', 'us_production_fedral_inspected_total.poultry',  'us_production_fedral_inspected_total.red.meat', 'aus_population_estimated.resident.population', 'us_fed_avg_dressed_heifers', 'aus_beef.veal_slaughterings', 'us_livestock_commercial_bulls.and.stags', 'us_cold_storage_veal', 'us_livestock_commercial_lambs.and.yearlings', 'aus_population_overseas_arrivals', 'us_fed_avg_live_calves', 'us_cold_storage_beef', 'us_commercial_avg_live_calves', 'aus_Meat.Produced....CATTLE..excl..calves.....Total..State..Original..tonnes.', 'aus_exports.of.beef..veal.and.live.cattle.to.US', 'us_fed_avg_dressed_steers', 'aus_population_net.overseas.migration', 'us_production_fedral_inspected_total.red.meat.and.poultry')
sig.x.train <- cbind(training.x$us_total.red.meat, training.x$us_production_commercial_beef, training.x$aus_avg_rainfall, training.x$us_production_fedral_inspected_total.poultry,  training.x$us_production_fedral_inspected_total.red.meat, training.x$aus_population_estimated.resident.population, training.x$us_fed_avg_dressed_heifers, training.x$aus_beef.veal_slaughterings, training.x$us_livestock_commercial_bulls.and.stags, training.x$us_cold_storage_veal, training.x$us_livestock_commercial_lambs.and.yearlings, training.x$aus_population_overseas_arrivals, training.x$us_fed_avg_live_calves, training.x$us_cold_storage_beef, training.x$us_commercial_avg_live_calves, training.x$aus_Meat.Produced....CATTLE..excl..calves.....Total..State..Original..tonnes., training.x$aus_exports.of.beef..veal.and.live.cattle.to.US, training.x$us_fed_avg_dressed_steers, training.x$aus_population_net.overseas.migration, training.x$us_production_fedral_inspected_total.red.meat.and.poultry)
colnames(sig.x.train) <- c('us_total.red.meat', 'us_production_commercial_beef', 'aus_avg_rainfall', 'us_production_fedral_inspected_total.poultry',  'us_production_fedral_inspected_total.red.meat', 'aus_population_estimated.resident.population', 'us_fed_avg_dressed_heifers', 'aus_beef.veal_slaughterings', 'us_livestock_commercial_bulls.and.stags', 'us_cold_storage_veal', 'us_livestock_commercial_lambs.and.yearlings', 'aus_population_overseas_arrivals', 'us_fed_avg_live_calves', 'us_cold_storage_beef', 'us_commercial_avg_live_calves', 'aus_Meat.Produced....CATTLE..excl..calves.....Total..State..Original..tonnes.', 'aus_exports.of.beef..veal.and.live.cattle.to.US', 'us_fed_avg_dressed_steers', 'aus_population_net.overseas.migration', 'us_production_fedral_inspected_total.red.meat.and.poultry')
sig.x.test <- cbind(test.x$us_total.red.meat, test.x$us_production_commercial_beef, test.x$aus_avg_rainfall, test.x$us_production_fedral_inspected_total.poultry,  test.x$us_production_fedral_inspected_total.red.meat, test.x$aus_population_estimated.resident.population, test.x$us_fed_avg_dressed_heifers, test.x$aus_beef.veal_slaughterings, test.x$us_livestock_commercial_bulls.and.stags, test.x$us_cold_storage_veal, test.x$us_livestock_commercial_lambs.and.yearlings, test.x$aus_population_overseas_arrivals, test.x$us_fed_avg_live_calves, test.x$us_cold_storage_beef, test.x$us_commercial_avg_live_calves, test.x$aus_Meat.Produced....CATTLE..excl..calves.....Total..State..Original..tonnes., test.x$aus_exports.of.beef..veal.and.live.cattle.to.US, test.x$us_fed_avg_dressed_steers, test.x$aus_population_net.overseas.migration, test.x$us_production_fedral_inspected_total.red.meat.and.poultry)
colnames(sig.x.test) <- c('us_total.red.meat', 'us_production_commercial_beef', 'aus_avg_rainfall', 'us_production_fedral_inspected_total.poultry',  'us_production_fedral_inspected_total.red.meat', 'aus_population_estimated.resident.population', 'us_fed_avg_dressed_heifers', 'aus_beef.veal_slaughterings', 'us_livestock_commercial_bulls.and.stags', 'us_cold_storage_veal', 'us_livestock_commercial_lambs.and.yearlings', 'aus_population_overseas_arrivals', 'us_fed_avg_live_calves', 'us_cold_storage_beef', 'us_commercial_avg_live_calves', 'aus_Meat.Produced....CATTLE..excl..calves.....Total..State..Original..tonnes.', 'aus_exports.of.beef..veal.and.live.cattle.to.US', 'us_fed_avg_dressed_steers', 'aus_population_net.overseas.migration', 'us_production_fedral_inspected_total.red.meat.and.poultry')
dim(sig.x.train)
modArima <- auto.arima(share.train, xreg=sig.x.train)
sig.x.train <- cbind(training.x$us_total.red.meat, training.x$us_production_commercial_beef, training.x$aus_avg_rainfall, training.x$us_production_fedral_inspected_total.poultry,  training.x$us_production_fedral_inspected_total.red.meat, training.x$aus_population_estimated.resident.population, training.x$us_fed_avg_dressed_heifers, training.x$aus_beef.veal_slaughterings, training.x$us_livestock_commercial_bulls.and.stags, training.x$us_cold_storage_veal, training.x$us_livestock_commercial_lambs.and.yearlings, training.x$aus_population_overseas_arrivals, training.x$us_fed_avg_live_calves, training.x$us_cold_storage_beef, training.x$us_commercial_avg_live_calves, training.x$aus_Meat.Produced....CATTLE..excl..calves.....Total..State..Original..tonnes., training.x$aus_exports.of.beef..veal.and.live.cattle.to.US, training.x$us_fed_avg_dressed_steers, training.x$aus_population_net.overseas.migration, training.x$us_production_fedral_inspected_total.red.meat.and.poultry)
colnames(sig.x.train) <- c('us_total.red.meat', 'us_production_commercial_beef', 'aus_avg_rainfall', 'us_production_fedral_inspected_total.poultry',  'us_production_fedral_inspected_total.red.meat', 'aus_population_estimated.resident.population', 'us_fed_avg_dressed_heifers', 'aus_beef.veal_slaughterings', 'us_livestock_commercial_bulls.and.stags', 'us_cold_storage_veal', 'us_livestock_commercial_lambs.and.yearlings', 'aus_population_overseas_arrivals', 'us_fed_avg_live_calves', 'us_cold_storage_beef', 'us_commercial_avg_live_calves', 'aus_Meat.Produced....CATTLE..excl..calves.....Total..State..Original..tonnes.', 'aus_exports.of.beef..veal.and.live.cattle.to.US', 'us_fed_avg_dressed_steers', 'aus_population_net.overseas.migration', 'us_production_fedral_inspected_total.red.meat.and.poultry')
sig.x.test <- cbind(test.x$us_total.red.meat, test.x$us_production_commercial_beef, test.x$aus_avg_rainfall, test.x$us_production_fedral_inspected_total.poultry,  test.x$us_production_fedral_inspected_total.red.meat, test.x$aus_population_estimated.resident.population, test.x$us_fed_avg_dressed_heifers, test.x$aus_beef.veal_slaughterings, test.x$us_livestock_commercial_bulls.and.stags, test.x$us_cold_storage_veal, test.x$us_livestock_commercial_lambs.and.yearlings, test.x$aus_population_overseas_arrivals, test.x$us_fed_avg_live_calves, test.x$us_cold_storage_beef, test.x$us_commercial_avg_live_calves, test.x$aus_Meat.Produced....CATTLE..excl..calves.....Total..State..Original..tonnes., test.x$aus_exports.of.beef..veal.and.live.cattle.to.US, test.x$us_fed_avg_dressed_steers, test.x$aus_population_net.overseas.migration, test.x$us_production_fedral_inspected_total.red.meat.and.poultry)
colnames(sig.x.test) <- c('us_total.red.meat', 'us_production_commercial_beef', 'aus_avg_rainfall', 'us_production_fedral_inspected_total.poultry',  'us_production_fedral_inspected_total.red.meat', 'aus_population_estimated.resident.population', 'us_fed_avg_dressed_heifers', 'aus_beef.veal_slaughterings', 'us_livestock_commercial_bulls.and.stags', 'us_cold_storage_veal', 'us_livestock_commercial_lambs.and.yearlings', 'aus_population_overseas_arrivals', 'us_fed_avg_live_calves', 'us_cold_storage_beef', 'us_commercial_avg_live_calves', 'aus_Meat.Produced....CATTLE..excl..calves.....Total..State..Original..tonnes.', 'aus_exports.of.beef..veal.and.live.cattle.to.US', 'us_fed_avg_dressed_steers', 'aus_population_net.overseas.migration', 'us_production_fedral_inspected_total.red.meat.and.poultry')
modArima <- auto.arima(share.train, xreg=sig.x.train)
sig.x.train <- cbind(training.x$us_total.red.meat, training.x$us_production_commercial_beef, training.x$aus_avg_rainfall, training.x$us_production_fedral_inspected_total.poultry,  training.x$us_production_fedral_inspected_total.red.meat, training.x$aus_population_estimated.resident.population, training.x$us_fed_avg_dressed_heifers, training.x$aus_beef.veal_slaughterings, training.x$us_livestock_commercial_bulls.and.stags, training.x$us_cold_storage_veal, training.x$us_livestock_commercial_lambs.and.yearlings, training.x$aus_population_overseas_arrivals, training.x$us_fed_avg_live_calves, training.x$us_cold_storage_beef, training.x$us_commercial_avg_live_calves, training.x$aus_Meat.Produced....CATTLE..excl..calves.....Total..State..Original..tonnes., training.x$aus_exports.of.beef..veal.and.live.cattle.to.US, training.x$us_fed_avg_dressed_steers, training.x$aus_population_net.overseas.migration)
colnames(sig.x.train) <- c('us_total.red.meat', 'us_production_commercial_beef', 'aus_avg_rainfall', 'us_production_fedral_inspected_total.poultry',  'us_production_fedral_inspected_total.red.meat', 'aus_population_estimated.resident.population', 'us_fed_avg_dressed_heifers', 'aus_beef.veal_slaughterings', 'us_livestock_commercial_bulls.and.stags', 'us_cold_storage_veal', 'us_livestock_commercial_lambs.and.yearlings', 'aus_population_overseas_arrivals', 'us_fed_avg_live_calves', 'us_cold_storage_beef', 'us_commercial_avg_live_calves', 'aus_Meat.Produced....CATTLE..excl..calves.....Total..State..Original..tonnes.', 'aus_exports.of.beef..veal.and.live.cattle.to.US', 'us_fed_avg_dressed_steers', 'aus_population_net.overseas.migration', 'us_production_fedral_inspected_total.red.meat.and.poultry')
sig.x.train <- cbind(training.x$us_total.red.meat, training.x$us_production_commercial_beef, training.x$aus_avg_rainfall, training.x$us_production_fedral_inspected_total.poultry,  training.x$us_production_fedral_inspected_total.red.meat, training.x$aus_population_estimated.resident.population, training.x$us_fed_avg_dressed_heifers, training.x$aus_beef.veal_slaughterings, training.x$us_livestock_commercial_bulls.and.stags, training.x$us_cold_storage_veal, training.x$us_livestock_commercial_lambs.and.yearlings, training.x$aus_population_overseas_arrivals, training.x$us_fed_avg_live_calves, training.x$us_cold_storage_beef, training.x$us_commercial_avg_live_calves, training.x$aus_Meat.Produced....CATTLE..excl..calves.....Total..State..Original..tonnes., training.x$aus_exports.of.beef..veal.and.live.cattle.to.US, training.x$us_fed_avg_dressed_steers, training.x$aus_population_net.overseas.migration)
colnames(sig.x.train) <- c('us_total.red.meat', 'us_production_commercial_beef', 'aus_avg_rainfall', 'us_production_fedral_inspected_total.poultry',  'us_production_fedral_inspected_total.red.meat', 'aus_population_estimated.resident.population', 'us_fed_avg_dressed_heifers', 'aus_beef.veal_slaughterings', 'us_livestock_commercial_bulls.and.stags', 'us_cold_storage_veal', 'us_livestock_commercial_lambs.and.yearlings', 'aus_population_overseas_arrivals', 'us_fed_avg_live_calves', 'us_cold_storage_beef', 'us_commercial_avg_live_calves', 'aus_Meat.Produced....CATTLE..excl..calves.....Total..State..Original..tonnes.', 'aus_exports.of.beef..veal.and.live.cattle.to.US', 'us_fed_avg_dressed_steers', 'aus_population_net.overseas.migration')
modArima <- auto.arima(share.train, xreg=sig.x.train)
summary(modArima)
sig.x.train <- cbind(training.x$us_total.red.meat, training.x$us_production_commercial_beef, training.x$aus_avg_rainfall, training.x$us_production_fedral_inspected_total.poultry,  training.x$us_production_fedral_inspected_total.red.meat, training.x$aus_population_estimated.resident.population, training.x$us_fed_avg_dressed_heifers, training.x$aus_beef.veal_slaughterings, training.x$us_livestock_commercial_bulls.and.stags, training.x$us_cold_storage_veal, training.x$us_livestock_commercial_lambs.and.yearlings, training.x$aus_population_overseas_arrivals, training.x$us_fed_avg_live_calves, training.x$us_cold_storage_beef, training.x$us_commercial_avg_live_calves, training.x$aus_Meat.Produced....CATTLE..excl..calves.....Total..State..Original..tonnes., training.x$aus_exports.of.beef..veal.and.live.cattle.to.US, training.x$us_fed_avg_dressed_steers, training.x$aus_population_net.overseas.migration)
colnames(sig.x.train) <- c('us_total.red.meat', 'us_production_commercial_beef', 'aus_avg_rainfall', 'us_production_fedral_inspected_total.poultry',  'us_production_fedral_inspected_total.red.meat', 'aus_population_estimated.resident.population', 'us_fed_avg_dressed_heifers', 'aus_beef.veal_slaughterings', 'us_livestock_commercial_bulls.and.stags', 'us_cold_storage_veal', 'us_livestock_commercial_lambs.and.yearlings', 'aus_population_overseas_arrivals', 'us_fed_avg_live_calves', 'us_cold_storage_beef', 'us_commercial_avg_live_calves', 'aus_Meat.Produced....CATTLE..excl..calves.....Total..State..Original..tonnes.', 'aus_exports.of.beef..veal.and.live.cattle.to.US', 'us_fed_avg_dressed_steers', 'aus_population_net.overseas.migration')
sig.x.test <- cbind(test.x$us_total.red.meat, test.x$us_production_commercial_beef, test.x$aus_avg_rainfall, test.x$us_production_fedral_inspected_total.poultry,  test.x$us_production_fedral_inspected_total.red.meat, test.x$aus_population_estimated.resident.population, test.x$us_fed_avg_dressed_heifers, test.x$aus_beef.veal_slaughterings, test.x$us_livestock_commercial_bulls.and.stags, test.x$us_cold_storage_veal, test.x$us_livestock_commercial_lambs.and.yearlings, test.x$aus_population_overseas_arrivals, test.x$us_fed_avg_live_calves, test.x$us_cold_storage_beef, test.x$us_commercial_avg_live_calves, test.x$aus_Meat.Produced....CATTLE..excl..calves.....Total..State..Original..tonnes., test.x$aus_exports.of.beef..veal.and.live.cattle.to.US, test.x$us_fed_avg_dressed_steers, test.x$aus_population_net.overseas.migration)
colnames(sig.x.test) <- c('us_total.red.meat', 'us_production_commercial_beef', 'aus_avg_rainfall', 'us_production_fedral_inspected_total.poultry',  'us_production_fedral_inspected_total.red.meat', 'aus_population_estimated.resident.population', 'us_fed_avg_dressed_heifers', 'aus_beef.veal_slaughterings', 'us_livestock_commercial_bulls.and.stags', 'us_cold_storage_veal', 'us_livestock_commercial_lambs.and.yearlings', 'aus_population_overseas_arrivals', 'us_fed_avg_live_calves', 'us_cold_storage_beef', 'us_commercial_avg_live_calves', 'aus_Meat.Produced....CATTLE..excl..calves.....Total..State..Original..tonnes.', 'aus_exports.of.beef..veal.and.live.cattle.to.US', 'us_fed_avg_dressed_steers', 'aus_population_net.overseas.migration')
modArima <- auto.arima(share.train, xreg=sig.x.train)
summary(modArima)
Forecasted_values<-forecast(modArima,nrow(test.y),xreg=sig.x.test)
Final_forecasted_values<-Forecasted_values$mean
Final_forecasted_values
(MSE.ARIMA.with.Seasonality.6 <- mean((test.y - Final_forecasted_values)^2))
(RMSE.ARIMA.with.Seasonality.6 <- sqrt(sum((test.y - Final_forecasted_values)^2)/12))
(MAE.ARIMA.with.Seasonality.6 <- sum(abs(test.y - Final_forecasted_values))/12)
forecast(modArima,nrow(test.y),xreg=sig.x.test) -> fc
ARIMA.with.Seasonality.plot.6 <- autoplot(market_share_all, series="Data") +
autolayer(fc, series="Forecast") +
autolayer(fitted(fc), series="Fitted")
ARIMA.with.Seasonality.plot.6 <- ARIMA.with.Seasonality.plot.6 + labs(title = "ARIMA.with.Seasonality.6") + labs(caption = "MSE = 0.02895914, RMSE = 0.1203311, MAE = 0.08326705")
ARIMA.with.Seasonality.plot.6
decompose_data = decompose(share.train, "additive")
adjust_market_share = share.train - decompose_data$seasonal
plot(adjust_market_share)
modArima_desea <- auto.arima(adjust_market_share, xreg=sig.x.train)
modArima_desea
Forecasted_values_des<-forecast(modArima_desea,nrow(test.y),xreg=sig.x.test)
Final_forecasted_values_des<-Forecasted_values_des$mean
(Final_forecasted_values_des)
(MSE.ARIMA.without.Seasonality.6 <- mean((test.y - Final_forecasted_values_des)^2))
(RMSE.ARIMA.without.Seasonality.6 <- sqrt(sum((test.y - Final_forecasted_values_des)^2)/12))
(MAE.ARIMA.without.Seasonality.6 <- sum(abs(test.y - Final_forecasted_values_des))/12)
forecast(modArima_desea,nrow(test.y),xreg=sig.x.test) -> fc1
ARIMA.without.Seasonality.plot.6 <- autoplot(market_share_all, series="Data") +
autolayer(fc1, series="Forecast") +
autolayer(fitted(fc1), series="Fitted")
ARIMA.without.Seasonality.plot.6 <- ARIMA.without.Seasonality.plot.6 + labs(title = "ARIMA.without.Seasonality.6") + labs(caption = "MSE = 0.00405941, RMSE = 0.04505225, MAE = 0.03041969")
ARIMA.without.Seasonality.plot.6
glm.train <- glm(share.train~., data=as.data.frame(sig.x.train))
(glm.prediction <- predict(glm.train, as.data.frame(sig.x.test)))
(MSE.GLM.6<- mean((test.y - glm.prediction)^2))
(RMSE.GLM.6 <- sqrt(sum((test.y - glm.prediction)^2)/12))
(MAE.GLM.6 <- sum(abs(test.y - glm.prediction))/12)
summary(glm.train)
fc1 <- ts(glm.prediction, start=c(2019.6),frequency=12)
fitted <- ts(glm.train$fitted.values, start=c(2008.1),frequency=12)
GLM.plot.6 <- autoplot(market_share_all, series="Data") +
autolayer(fc1, series="Forecast") +
autolayer(fitted, series="Fitted")
GLM.plot.6 <- GLM.plot.6 + labs(title = "GLM.6") + labs(caption = "MSE = 0.03416766, RMSE = 0.1307051, MAE = 0.09071505")
GLM.plot.6
glm.train.step <- step(glm.train, trace = FALSE)
summary(glm.train.step)
(glm.prediction.step <- predict(glm.train.step, as.data.frame(sig.x.test)))
(MSE.GLM.step.6 <- mean((test.y - glm.prediction.step)^2))
(RMSE.GLM.step.6 <- sqrt(sum((test.y - glm.prediction.step)^2)/12))
(MAE.GLM.step.6 <- sum(abs(test.y - glm.prediction.step))/12)
fc1 <- ts(glm.prediction.step, start=c(2019.6),frequency=12)
fitted <- ts(glm.train.step$fitted.values, start=c(2008.1),frequency=12)
GLM.step.plot.6 <- autoplot(market_share_all, series="Data") +
autolayer(fc1, series="Forecast") +
autolayer(fitted, series="Fitted")
GLM.step.plot.6 <- GLM.step.plot.6 + labs(title = "GLM.step.6") + labs(caption = "MSE = 0.009976842, RMSE = 0.07062875, MAE = 0.04878579")
GLM.step.plot.6
MSE.ARIMA.with.Seasonality.6
MSE.ARIMA.without.Seasonality.6 #best
MSE.GLM.6
MSE.GLM.step.6
RMSE.ARIMA.with.Seasonality.6
RMSE.ARIMA.without.Seasonality.6 #best
RMSE.GLM.6
RMSE.GLM.step.6
MAE.ARIMA.with.Seasonality.6
MAE.ARIMA.without.Seasonality.6 #best
MAE.GLM.6
MAE.GLM.step.6
corr <- t(cor(share.train, sig.x.train))
colnames(corr) <- c("correlation.with.share")
corr[,"correlation.with.share"] <- abs(corr[,"correlation.with.share"])
corr <- as.data.frame(corr)
corr <- corr[order(-corr$correlation.with.share),,drop=FALSE]
MSE.corr <- matrix(0, nrow = dim(corr)[1], ncol = 1)
for (i in 1:dim(corr)[1]){
x.train <- subset(sig.x.train, select = rownames(corr)[1:i])
x.test <- subset(sig.x.test, select = rownames(corr)[1:i])
modArima_desea_corr <- auto.arima(adjust_market_share, xreg=x.train)
Forecasted_values_des_corr<-forecast(modArima_desea_corr,nrow(test.y),xreg=x.test)
Final_forecasted_values_des_corr<-Forecasted_values_des_corr$mean
MSE.corr[i,1] <- mean((test.y - Final_forecasted_values_des_corr)^2)
}
MSE.corr
index <- which(MSE.corr[,1] == min(MSE.corr))
x.train <- subset(sig.x.train, select = rownames(corr)[1:index])
x.test <- subset(sig.x.test, select = rownames(corr)[1:index])
(MSE.ARIMA.without.Seasonality.corr <- min(MSE.corr))
rownames(corr)[1:index]
modArima_desea_corr <- auto.arima(adjust_market_share, xreg=x.train)
Forecasted_values_des_corr<-forecast(modArima_desea_corr,nrow(test.y),xreg=x.test)$mean
(MSE.ARIMA.without.Seasonality.corr.6 <- min(MSE.corr))
(RMSE.ARIMA.without.Seasonality.corr.6 <- sqrt(sum((test.y - Forecasted_values_des_corr)^2)/12))
(MAE.ARIMA.without.Seasonality.corr.6 <- sum(abs(test.y - Forecasted_values_des_corr))/12)
forecast(modArima_desea_corr,nrow(test.y),xreg=x.test) -> fc1
ARIMA.Corr.without.Seasonality.plot.6 <- autoplot(market_share_all, series="Data") +
autolayer(fc1, series="Forecast") +
autolayer(fitted(fc1), series="Fitted")
ARIMA.Corr.without.Seasonality.plot.6 <- ARIMA.Corr.without.Seasonality.plot.6 + labs(title = "ARIMA.Corr.without.Seasonality.6") + labs(caption = "MSE = 0.0001057618, RMSE = 0.007271925, MAE = 0.003522979")
ARIMA.Corr.without.Seasonality.plot.6
forecast(modArima_desea_corr,nrow(test.y),xreg=x.test) -> fc1
ARIMA.Corr.without.Seasonality.plot.6 <- autoplot(market_share_all, series="Data") +
autolayer(fc1, series="Forecast") +
autolayer(fitted(fc1), series="Fitted")
ARIMA.Corr.without.Seasonality.plot.6 <- ARIMA.Corr.without.Seasonality.plot.6 + labs(title = "ARIMA.Corr.without.Seasonality.6") + labs(caption = "MSE = 8.527659e-05, RMSE = 0.006529801, MAE = 0.003993603")
ARIMA.Corr.without.Seasonality.plot.6
forecast(modArima_desea_corr,nrow(test.y),xreg=x.test)$mean -> fc
ARIMA.Corr.without.Seasonality.forecast.6 <- autoplot(share.test, series="Data") + autolayer(fc, series="Forecast")
ARIMA.Corr.without.Seasonality.forecast.6 <- ARIMA.Corr.without.Seasonality.forecast.6 + labs(title = "ARIMA.Corr.without.Seasonality.forecast.6")+ labs(caption = "MSE = 8.527659e-05, RMSE = 0.006529801, MAE = 0.003993603")
ARIMA.Corr.without.Seasonality.forecast.6
modArima.corr <- auto.arima(share.train, xreg=x.train)
summary(modArima.corr)
Forecasted_values_corr<-forecast(modArima.corr,nrow(test.y),xreg=x.test)
Final_forecasted_values_corr<-Forecasted_values_corr$mean
Final_forecasted_values_corr
(MSE.ARIMA.with.Seasonality.corr.6 <- mean((test.y - Final_forecasted_values_corr)^2))
(RMSE.ARIMA.with.Seasonality.corr.6 <- sqrt(sum((test.y - Final_forecasted_values_corr)^2)/12))
(MAE.ARIMA.with.Seasonality.corr.6 <- sum(abs(test.y - Final_forecasted_values_corr)/12))
forecast(modArima.corr,nrow(test.y),xreg=x.test) -> fc
ARIMA.Corr.with.Seasonality.plot.6 <- autoplot(market_share_all, series="Data") +
autolayer(fc, series="Forecast") +
autolayer(fitted(fc), series="Fitted")
ARIMA.Corr.with.Seasonality.plot.6 <- ARIMA.Corr.with.Seasonality.plot.6 + labs(title = "ARIMA.Corr.with.Seasonality.6") + labs(caption = "MSE = 0.0008356075, RMSE = 0.02044025, MAE = 0.01150743")
ARIMA.Corr.with.Seasonality.plot.6
ARIMA.Corr.with.Seasonality.forecast.6 <- ARIMA.Corr.with.Seasonality.forecast.6 + labs(title = "ARIMA.Corr.with.Seasonality.forecast.6")+ labs(caption = "MSE = 0.0008356075, RMSE = 0.02044025, MAE = 0.01150743")
forecast(modArima.corr,nrow(test.y),xreg=x.test)$mean -> fc
ARIMA.Corr.with.Seasonality.forecast.6 <- autoplot(share.test, series="Data") + autolayer(fc, series="Forecast")
ARIMA.Corr.with.Seasonality.forecast.6 <- ARIMA.Corr.with.Seasonality.forecast.6 + labs(title = "ARIMA.Corr.with.Seasonality.forecast.6")+ labs(caption = "MSE = 0.0008356075, RMSE = 0.02044025, MAE = 0.01150743")
ARIMA.Corr.with.Seasonality.forecast.6
glm.train.corr <- glm(share.train~., data=as.data.frame(x.train))
(glm.prediction.corr <- predict(glm.train.corr, as.data.frame(x.test)))
(MSE.GLM.corr.6<- mean((test.y - glm.prediction.corr)^2))
(RMSE.GLM.corr.6 <- sqrt(sum((test.y - glm.prediction.corr)^2)/12))
(MAE.GLM.corr.6 <- sum(abs(test.y - glm.prediction.corr)/12))
fc1 <- ts(glm.prediction.corr, start=c(2019.6),frequency=12)
fitted <- ts(glm.train.corr$fitted.values, start=c(2008.1),frequency=12)
GLM.Corr.plot.6 <- autoplot(market_share_all, series="Data") +
autolayer(fc1, series="Forecast") +
autolayer(fitted, series="Fitted")
GLM.Corr.plot.6 <- GLM.Corr.plot.6 + labs(title = "GLM.Corr.6") + labs(caption = "MSE = 0.001640449, RMSE = 0.02863956, MAE = 0.01829992")
GLM.Corr.plot.6
fc1 <- ts(glm.prediction.corr, start=c(2019.6),frequency=12)
glm.corr.forecast.6 <- autoplot(share.test, series="Data") + autolayer(fc1, series="Forecast")
glm.corr.forecast.6 <- glm.corr.forecast.6 + labs(title = "glm.corr.forecast.6")+ labs(caption = "MSE = 0.001640449, RMSE = 0.02863956, MAE = 0.01829992")
glm.corr.forecast.6
# Features used based on correlation with market share
MSE.ARIMA.with.Seasonality.corr.6 #best
MSE.ARIMA.without.Seasonality.corr.6
MSE.GLM.corr.6
# Features used based on correlation with market share
RMSE.ARIMA.with.Seasonality.corr.6 #best
RMSE.ARIMA.without.Seasonality.corr.6
RMSE.GLM.corr.6
# Features used based on correlation with market share
MAE.ARIMA.with.Seasonality.corr.6 #best
MAE.ARIMA.without.Seasonality.corr.6
MAE.GLM.corr.6
ARIMA.with.Seasonality.plot.6 +
ARIMA.without.Seasonality.plot.6 +
GLM.plot.6 +
GLM.step.plot.6
ARIMA.Corr.with.Seasonality.plot.6 + ARIMA.Corr.without.Seasonality.plot.6 + ARIMA.Corr.with.Seasonality.forecast.6 + ARIMA.Corr.without.Seasonality.forecast.6
GLM.Corr.plot.6 + glm.corr.forecast.6
Xtrain <- read.table("XGtrainRain")
Xtrain <- read.table("XGtrainRain.txt", sep = "")
Xtrain <- read.table("XGtrainRain.txt")
Xtrain <- read.table("XGtrainRain.txt", sep = "")
Xtrain <- data("XGtrainRain.txt")
Xtrain <- data("XGtrainRain")
XGtrainRain
XGtrainRain
Xtrain <- read.table("XGtrainRain.txt", sep = "")
Xtrain <- read.table("XGtrainRain.txt", sep = "")
Xtrain <- read.table("XGtrainRain.txt", sep = "")
XGtestRain <- read.csv("~/Desktop/MAST90138/Assignments/Asmt3/XGtestRain.txt", header=FALSE)
View(XGtestRain)
XGtrainRain <- read.csv("~/Desktop/MAST90138/Assignments/Asmt3/XGtrainRain.txt", header=FALSE)
View(XGtrainRain)
XGtrain <- XGtrainRain
XGtest <- XGtestRain
XGtrain
XGtrain <- read.table("/Users/abigail/Desktop/MAST90138/Assignments/Asmt3/XGtrainRain.txt")
XGtrain <- read.table("/Users/abigail/Desktop/MAST90138/Assignments/Asmt3/XGtrainRain.txt", sep="")
XGtrain <- read.table("XGtrainRain.txt", sep="")
XGtrain <- read.data("XGtrainRain.txt", sep="")
XGtrain <- read.matrix("XGtrainRain.txt", sep="")
XGtrain <- read.table("XGtrainRain.txt", sep="")
XGtrain
XGtrain.colNames()
XGtrain.colnames
XGtrain.colnames()
colnames(XGtrain)
colnames(XGtrain) <- XGtrain[,1]
colnames(XGtrain) <- XGtrain[,1]
XGtrain
XGtrain
XGtrain <- XGtrainRain
XGtest <- XGtestRain
XGtrain
XGtrain[,1]
XGtrain[1,]
colnames(XGtrain) <- XGtrain[1,]
colnames(XGtrain) <- XGtrain[1,]
XGtrain
XGtrain <- XGtrainRain
XGtest <- XGtestRain
colnames(XGtrain) <- XGtrain[1,]
XGtrain
XGtrain <- XGtrainRain
XGtest <- XGtestRain
# colnames(XGtrain) <- XGtrain[1,]
XGtrain[1,]
# colnames(XGtrain) <- XGtrain[1,]
XGtrain[1,]
colnames(XGtrain)
# colnames(XGtrain) <- XGtrain[1,]
XGtrain.colnames(XGtrain[1,])
XGtrain <- XGtrainRain
XGtest <- XGtestRain
colnames(XGtrain) <- XGtrain[1,]
colnames(XGtrain)
XGtrain <- XGtrainRain
XGtest <- XGtestRain
XGtrain[1,]
# colnames(XGtrain) <- XGtrain[1,]
# colnames(XGtrain)
list(XGtrain[1,])
# colnames(XGtrain) <- XGtrain[1,]
# colnames(XGtrain)
c(XGtrain[1,])
# colnames(XGtrain) <- XGtrain[1,]
# colnames(XGtrain)
XGtrain[1,]
# colnames(XGtrain) <- XGtrain[1,]
# colnames(XGtrain)
as.matrix(XGtrain[1,])
# colnames(XGtrain) <- XGtrain[1,]
# colnames(XGtrain)
as.list(XGtrain[1,])
# colnames(XGtrain) <- XGtrain[1,]
# colnames(XGtrain)
as.list(XGtrain[1,])[1]
# colnames(XGtrain) <- XGtrain[1,]
# colnames(XGtrain)
as.list(XGtrain[1,])[1][1]
# colnames(XGtrain) <- XGtrain[1,]
# colnames(XGtrain)
as.list(XGtrain[1,])
# colnames(XGtrain) <- XGtrain[1,]
# colnames(XGtrain)
XGtrain[1,]
# colnames(XGtrain) <- XGtrain[1,]
# colnames(XGtrain)
train <- read.table("XGtrainRain.txt", header = 1, sep = '')
train <- read.table("XGtrainRain.txt", header = 1, sep = "")
train <- read.table("XGtrainRain.txt", header = TRUE, sep = "")
train <- read.table("XGtrainRain.txt", header = TRUE, sep = "", dec = ".")
train <- read.table(file = "XGtrainRain.txt", header = TRUE, sep = "", dec = ".")
train <- read.table(file = "XGtrainRain.txt", header = TRUE)
train <- read.table(file = "XGtrainRain.txt", header = TRUE)
train <- read.table(file = "XGtrainRain.txt", header = FALSE)
train <- read.table(file = "XGtrainRain.txt", header = TRUE, sep = "\n")
train
train <- read.table(file = "XGtrainRain.txt", header = TRUE, sep = ",")
train
XGtrain <- read.table(file = "XGtrainRain.txt", header = TRUE, sep = ",")
XGtext <- read.table(file = "XGtextRain.txt", header = TRUE, sep = ",")
XGtrain <- read.table(file = "XGtrainRain.txt", header = TRUE, sep = ",")
XGtext <- read.table(file = "XGtextRain.txt", header = TRUE, sep = ",")
XGtrain <- read.table(file = "XGtrainRain.txt", header = TRUE, sep = ",")
XGtest <- read.table(file = "XGtestRain.txt", header = TRUE, sep = ",")
XGtest
dim(XGtrain)
dim(XGtest)
XGtrain
XGtrain[-1,]
XGtrain[,366]
XGtest[,366]
dim(XGtest)
XGtrainTecator <- read.table("~/Desktop/MAST90138/Lab/XGtrainTecator.txt", quote="\"", comment.char="")
View(XGtrainTecator)
XGtrainTecator <- read.table("~/Desktop/MAST90138/Lab/XGtrainTecator.txt", quote="\"", comment.char="")
View(XGtrainTecator)
XGtestTecator <- read.table("~/Desktop/MAST90138/Lab/XGtestTecator.txt", quote="\"", comment.char="")
View(XGtestTecator)
m1=lm(G~X1+X2,data=XGtrainTecator)
XGtrainTecator
source("~/Desktop/MAST90138/Lab/Lab8.R", echo=TRUE)
XGtrain <- read.table(file = "XGtrainTecator.txt", header = TRUE, sep = ",")
lines(x1,(1/2-beta0-beta[1]*x1)/beta[2],type='l')
m1=lm(G~X1+X2,data=XGtrainTecator)
read.table(file = "XGtrainTecator.txt", header = TRUE, sep = ",")
m1=lm(G~X1+X2,data=XGtrainTecator)
m1=lm(G~X1+X2,data=XGtrainTecator)
m1=lm(G~X1+X2,data=XGtrainTecator)
XGtrain <- read.table(file = "XGtrainTecator.txt", header = TRUE, sep = ",")
XGtrainTecator
m1=lm(G~X1+X2,data=XGtrainTecator)
XGtrainTecator <- read.table(file = "XGtrainTecator.txt", header = TRUE, sep = ",")
n = 10
I = matrix(1, ncol=n, nrow=n)
I
n = 10
I = matrix(1, ncol=n, nrow=n)
solve(I)
n = 100
I = matrix(1, ncol=n, nrow=n)
solve(I)
n = 3
I = matrix(1, ncol=n, nrow=n)
solve(I)
x%*%XT
n = 3
X = matrix(1, ncol=n, nrow=1)
XT = matrix(1, ncol=1, nrow=n)
X%*%XT
n = 3
X = diag(2, ncol=n, nrow=n)
X
n = 3
X = diag(2, ncol=n, nrow=n)
X%*%X
n = 3
X = diag(2, ncol=n, nrow=n)
solve(X%*%X)
n = 3
X = diag(2, ncol=n, nrow=n)
solve(X%*%X)
X^(-2)
library("ggplot2")
library("R.matlab")
install.packages("ggplot2")
install.packages("R.matlab")
install.packages("ggplot2")
install.packages("R.matlab")
install.packages("reshape2")
install.packages("pracma")
install.packages("plot.matrix")
install.packages("MASS")
library("ggplot2")
library("R.matlab")
library("reshape2")
library("pracma")
library("plot.matrix")
library("MASS")
library("ggplot2")
library("R.matlab")
library("reshape2")
library("pracma")
library("plot.matrix")
library("MASS")
ones_dur <- 15
ones_onsets <- seq(0,N-20, by = 30)
####################################function that needs to be saved in getstim file
getstim <- function(ones_onsets,ones_dur,timeseries_len)
{
stim<-numeric(timeseries_len)
for(i in 1:length(ones_onsets))
{
stim[(ones_onsets[i]+1):(ones_dur+ones_onsets[i])] <- c(replicate(ones_dur,1))
}
return(stim)
}
####################################This needs to be saved in the main file along with rest of the code given below for each question
####################################This needs to be saved in the main file along with rest of the code given below for each question
####################################This needs to be saved in the main file along with rest of the code given below for each question
rm(list=ls())
source("D:/Codefiles/2021/R/getstim.R")
####################################function that needs to be saved in getstim file
getstim <- function(ones_onsets,ones_dur,timeseries_len)
{
stim<-numeric(timeseries_len)
for(i in 1:length(ones_onsets))
{
stim[(ones_onsets[i]+1):(ones_dur+ones_onsets[i])] <- c(replicate(ones_dur,1))
}
return(stim)
}
####################################This needs to be saved in the main file along with rest of the code given below for each question
####################################This needs to be saved in the main file along with rest of the code given below for each question
####################################This needs to be saved in the main file along with rest of the code given below for each question
rm(list=ls())
#source("D:/Codefiles/2021/R/getstim.R")
####################################libraries
#install.packages("ggplot2")
#install.packages("R.matlab")
#install.packages("reshape2")
#install.packages("pracma")
#install.packages("plot.matrix")
#install.packages("MASS")
library("ggplot2")
library("R.matlab")
library("reshape2")
library("pracma")
library("plot.matrix")
library("MASS")
####################################objects
nsrcs <-3 #number of sources
N <- 240 #number of time points
x1<- 21 #slice size in horizontal direction
x2<- 21 #slice size in vertical direction
var_arr<-c(0.25,0.05) # array of temporal and spatial noise
T <-3; # threshold for least square
#Question 1:
####################################Source TCs and their plot
# 1.
ones_dur <- 15
ones_onsets <- seq(0,N-20, by = 30)
stimA<-getstim(ones_onsets, ones_dur, N)
####################################function that needs to be saved in getstim file
getstim <- function(ones_onsets,ones_dur,timeseries_len)
{
stim<-numeric(timeseries_len)
for(i in 1:length(ones_onsets))
{
stim[(ones_onsets[i]+1):(ones_dur+ones_onsets[i])] <- c(replicate(ones_dur,1))
}
return(stim)
}
####################################This needs to be saved in the main file along with rest of the code given below for each question
####################################This needs to be saved in the main file along with rest of the code given below for each question
####################################This needs to be saved in the main file along with rest of the code given below for each question
rm(list=ls())
#source("D:/Codefiles/2021/R/getstim.R")
####################################libraries
#install.packages("ggplot2")
#install.packages("R.matlab")
#install.packages("reshape2")
#install.packages("pracma")
#install.packages("plot.matrix")
#install.packages("MASS")
library("ggplot2")
library("R.matlab")
library("reshape2")
library("pracma")
library("plot.matrix")
library("MASS")
####################################objects
nsrcs <-3 #number of sources
N <- 240 #number of time points
x1<- 21 #slice size in horizontal direction
x2<- 21 #slice size in vertical direction
var_arr<-c(0.25,0.05) # array of temporal and spatial noise
T <-3; # threshold for least square
#Question 1:
####################################Source TCs and their plot
# 1.
ones_dur <- 15
ones_onsets <- seq(0,N-20, by = 30)
stimA<-getstim(ones_onsets, ones_dur, N)
